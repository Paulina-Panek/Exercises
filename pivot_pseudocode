Paulina Panek  4/14/2019

Assumption: flat table doesn't have header a row/column, columns follow the same order as in the struct, last entry followed by a null sign

define struct person
{
    char name[15]
    char city[15]
    char state[2]
    char item[15]
    float price
    struct person* link_back
}

*********************************************
*  Create a linked-list from the flat table *
*********************************************

define pointers to person called start, end, temp_prev, temp_next, one_back
define integers i, j, index, q, endCheck
define a float  sumPrice

copy from NULL to start
copy from NULL to end
copy from NULL to temp_prev
copy from NULL to temp_next

********************************************************************************************
* Function that creates a linked-list out of 2D array and makes a pivot table out of it    *
********************************************************************************************
void function makePivot (flat_table[][], rowfield[2], columnfield[], datafield[2])
{
    i = 0, j = 0
    
    while (end of table not reached)      /* set the condition by null sign/eof sign, or predefined size) */
    {
        if start == NULL
        {
            allocate a heap space and store its address into start
            copy from start to temp_next
        }
        else
        {
            allocate a heap space and store its address into temp_next
        }
        
        copy from flat_table[i][j] to temp_next->name
        copy from flat_table[i][j+1] to temp_next->city
        copy from flat_table[i][j+2] to temp_next->state
        copy from flat_table[i][j+3] to temp_next->item
        copy from flat_table[i][j+4] to temp_next->price
        copy from temp_prev to temp_next->link_back
        copy from temp_next to temp_prev
        i++      /* (i+1) = number of persons = number of rows in flat table */
    }
    copy from temp_prev to end
    
    ********************************************************
    *   Values after creating the linked-list:             *
    *   start = ptr to person with NULL in link_back       *
    *   - not really necessary for this code, but good     *
    *   to have if further development of the code needed  *
    *   temp_prev = ptr to "end person"                    *
    *   temp_next = ptr to "end person"                    *
    *   end = ptr to "end person"                          *
    ********************************************************
    
    ***************************************************************************
    *     Assumed pivot config:                                               *
    *          rowfield[0] = state                                            *
    *          rowfield[1] = city                                             *
    *          columnfield = data                                             *
    *          datafield[0] = sumCity                                         *
    *          datafield[1] = sumPrice                                        *
    *          parameters_num = 4    (num needed columns in pivot)            *
    * Code that translate the config choice into variables needed             *
    * so I can refer to temp_prev->state etc                                  *
    ***************************************************************************
   
      allocate pivot[i+2][parameters_num] array        /* max possible size, might not all be used, adds a row for total sum */
      initiate pivot array with null signs

      index = 0

      for (temp_prev != NULL)   /* while linked-list not empty */
      {
         copy from NULL to one_back
         copy from 1 to endCheck
         copy from end->state to pivot[index][0]
         copy from end->city to pivot[index][1]
         /* can't sum cities so leaving that out, using string library I could check if string or number and assing NULL if char */
         copy from temp_prev->price to pivot[index][3]
         copy from end->link_back to temp_next
         copy from temp_next to end
         endCheck = removeFromLL(temp_prev, one_back)

         while (endCheck == 1)   /* while we didn't hit the end of the flat table */
         {
             if sameStateCity(pivot[index][0], pivot[index][1], temp_prev) == 1
             {
                 pivot[0][3] = pivot[0][3] + temp_prev->price
                 endCheck = removeFromLL(temp_prev, one_back)
             }
             else
             {
                 endCheck = MoveToNextPerson(temp_prev, temp_next, one_back)
             }
        }
        index++
     }
 
    copy from 0.0 to sumPrice
 
    for (q = 0, q < index, q++)
    {
         sumPrice = sumPrice + pivot[q][3]
    }
    copy from sumPrice to pivot[q+1][3]   /* last row of the pivot is sum */
}

***********************************************           
*                 FUNCTIONS:                  *
***********************************************
 
 ********************************************************************************************
* Function that checks if the searched person matches the searched city/state criterion     *
* Could be used with other configurations adjusted to whether comparing strings or numbers  *
* Return 1: same as query    Return 0: does not match query                                 *
*********************************************************************************************
 int sameStateCity(char [] state, char [] city, struct person * person_ptr)
 {
     int rtrn
     
     rtrn = 0
     
     if (state == person_pointer->state)     /* use function from string library to do this comparison */
     {
       if city == person_pointer->city
       {
           rtrn = 1
       }
     }   
     return(rtrn)
 }
 
 
********************************************************************************************
* Function that moves to next person struct without deleting the previous one              *
* Return 1: success    Return 0: no more person structs left                               *
********************************************************************************************
  int MoveToNextPerson(struct person* temp_prev, struct person* temp_next, one_back)
  {
      int rtrn
      
      if (temp_next == NULL)
      {   
          temp_prev = end
          rtrn = 0
      }
      else
      {
          one_back = temp_prev
          temp_prev = temp_next
          
          if temp_next == NULL
          {
            rtrn = 0
          }
           else
           {
               copy from temp_next->link_back to temp_next
               rtrn = 1
           }
      }
    return(rtrn)
    }
    
    
************************************************************************************************
* Function that deallocates person, removes dangling pointers and moves to next person struct  *
* Return 1: success    Return 0: success and no more persons in linked list                    *
************************************************************************************************
    int removeFromLL(temp_prev, one_back)
    
    int rtrn
    
    rtrn = 1
    
    {
        deallocate (temp_prev)
        if one_back != NULL
        {
               copy from temp_next to one_back->link_back  
        }

        copy from temp_next to temp_prev
        if temp_prev == NULL
        {
           copy from NULL to start
           rtrn = 0
        }
        else
        {
            copy from temp_prev->link_back to temp_next
        }
        
        return(rtrn)
    }
