Paulina Panek  4/14/2019

Assumption: flat table doesn't have header row, columns follow the same order as in the struct

define struct person
{
    char name[15]
    char city[15]
    char state[2]
    char item[15]
    float price
    struct person* link_back
}

define a pointer to person called start
define a pointer to person called temp_prev
define a pointer to person called temp_next
define integers i, j, city1_sum, city2_sum

copy from NULL to start
copy from NULL to temp_prev
copy from NULL to temp_next

void function makePivot (flat_table[][], rowfield[2], columnfield[], datafield[2])
{
    i = 0, j = 0
    
    while (flat table not empty/null sign)
    {
        if start == NULL
        {
            allocate a heap space and store its address into start
        }
        else
        {
            allocate a heap space and store its address into temp_next
        }
        
        copy from ith row jth column to name
        copy from ith row (j+1)th column to city
        copy from ith row (j+2)th column to state
        copy from ith row (j+3)th column to item
        copy from ith row (j+4)th column to price
        copy from temp_prev to link_back
        copy from start to temp_prev
        i++
    }
    
    Assumption: rowfield[0] = state
                rowfield[1] = city
                columnfield = data
                datafield[0] = sumCity
                datafield[1] = sumPrice
                parameters_num = 4
                
                
   copy from start->state to state_cat
   copy from start->city to city_cat
   copy from start->link_back to temp_next
   
   rows = 0
   
   while temp_prev->link_back != NULL
   {
       state1 = temp_prev->state
       city1 = temp_prev->city
       rows++
       temp_prev = temp_prev->link_back
       if state1 == temp_prev->city
       {
           if city1 != temp_prev->city
           {
               rows++
           }
           temp_prev = temp_prev->link_back
       }
       else
       {
           
       }
           
    
